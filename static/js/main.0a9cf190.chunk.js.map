{"version":3,"sources":["Components/HashFunction.js","Components/HashArray.js","Components/CollisionHandle.js","App.js","serviceWorker.js","index.js"],"names":["HashFunction","state","arrayLength","arrayKey","hashingMagic","arrayIndex","hashedInto","codeValue","added","handleChange","event","target","name","_this","setState","Object","defineProperty","value","makeHash","key_in","key","array","array_sum","Number","length","i","char","charCode","charCodeAt","push","String","_i","doNothing","react_default","a","createElement","type","this","onChange","Component","HashArray","compressing","arrayValue","_this2","divs","console","log","className","map","d","id","CollisionHandle","position","index0","index1","index2","index3","index4","addToIndexArray","index","slice","includes","unshift","_this$state","onClick","App","Components_HashFunction","Components_HashArray","Components_CollisionHandle","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a9cf190.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass HashFunction extends Component {\r\n    state = {\r\n        arrayLength : \"\",\r\n        arrayKey : \"\", \r\n        hashingMagic : \"\",\r\n        arrayIndex : \"\",\r\n        hashedInto : \"\",\r\n        codeValue : \"\",\r\n        added : \"\", \r\n    }\r\n\r\n    \r\n    handleChange = event => {\r\n        if( event.target.name === \"arrayKey\"){\r\n            this.setState({ [event.target.name]: event.target.value },this.makeHash(event.target.value));\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value});\r\n        }\r\n    };\r\n\r\n    makeHash = (key_in) => {\r\n        // index = hash_function(key) % array.length; \r\n        // array[index] = Value; \r\n        const key = key_in;\r\n        const array = [];\r\n        let array_sum = 0;\r\n        const arrayLength = Number(this.state.arrayLength);\r\n        let hashedInto = \"[\";\r\n        let codeValue = \"[\";\r\n        let added = \"\"; \r\n        if(key.length && arrayLength){\r\n            for (let i = 0; i < key.length; i++){\r\n                const char = key[i];\r\n                const charCode = char.charCodeAt(0);\r\n                array.push(charCode)\r\n                hashedInto += \"'\";\r\n                hashedInto += String(char);\r\n                hashedInto += \"'\";\r\n                codeValue +=  String(charCode);\r\n                added += String(charCode);\r\n                if(i < key.length -1){\r\n                    codeValue += \",\"\r\n                    hashedInto += \",\";\r\n                    added += \"+\";\r\n                }\r\n            }\r\n            hashedInto += \"]\";\r\n            codeValue += \"]\";\r\n            added += \"=\";\r\n\r\n            for(let num of array){\r\n                array_sum += num; \r\n            }\r\n\r\n            const hashingMagic = array_sum; \r\n\r\n            const arrayIndex = hashingMagic %  arrayLength; \r\n            this.setState({hashingMagic, arrayIndex, hashedInto, codeValue, added});\r\n\r\n        } else {\r\n            this.setState({hashingMagic : \"\", arrayIndex : \"\"});\r\n        }\r\n    }\r\n    doNothing = () => {\r\n        return; \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h1>Array Length</h1>\r\n                    <input type=\"text\" name = \"arrayLength\" value = {this.state.arrayLength} onChange = {this.handleChange}/>\r\n                </div>\r\n                <div>\r\n                    <h1>Key</h1>\r\n                    <input type=\"text\" name = \"arrayKey\" value = {this.state.arrayKey} onChange = {this.handleChange}/>\r\n                </div>\r\n                <div>\r\n                <span>\r\n                    <h5>{this.state.hashedInto}</h5> \r\n                    <h5>{this.state.codeValue}</h5>\r\n                    <h5>{this.state.added}</h5>\r\n                    </span>\r\n                    <h1>Hashing Magic</h1>\r\n                    <input type=\"text\" name = \"hashingMagic\" value = {this.state.hashingMagic} onChange = {this.doNothing}/>\r\n                    \r\n                </div>\r\n                <div>\r\n                    <h1>Array Index</h1>\r\n                    <h5>{this.state.hashingMagic} % {this.state.arrayLength}</h5>\r\n                    <input type=\"text\" name = \"arrayIndex\" value = {this.state.arrayIndex} onChange = {this.doNothing}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HashFunction; ","import React, { Component } from 'react';\r\n\r\nclass HashArray extends Component {\r\n    state = {\r\n        arrayLength : \"\",\r\n        arrayKey : \"\", \r\n        hashingMagic : \"\",\r\n        arrayIndex : \"\",\r\n        compressing : \"\", \r\n        arrayValue : \"\", \r\n    }\r\n    handleChange = event => {\r\n        if( event.target.name === \"arrayKey\"){\r\n            this.setState({ [event.target.name]: event.target.value },this.makeHash(event.target.value));\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value});\r\n        }\r\n    };\r\n\r\n    makeHash = (key_in) => {\r\n        // index = hash_function(key) % array.length; \r\n        // array[index] = Value; \r\n        const key = key_in;\r\n        const array = [];\r\n        let array_sum = 0;\r\n        const arrayLength = Number(this.state.arrayLength);\r\n        let hashedInto = \"[\";\r\n        let codeValue = \"[\";\r\n        let added = \"\"; \r\n        if(key.length && arrayLength){\r\n            for (let i = 0; i < key.length; i++){\r\n                const char = key[i];\r\n                const charCode = char.charCodeAt(0);\r\n                array.push(charCode)\r\n                hashedInto += \"'\";\r\n                hashedInto += String(char);\r\n                hashedInto += \"'\";\r\n                codeValue +=  String(charCode);\r\n                added += String(charCode);\r\n                if(i < key.length -1){\r\n                    codeValue += \",\"\r\n                    hashedInto += \",\";\r\n                    added += \"+\";\r\n                }\r\n            }\r\n            hashedInto += \"]\";\r\n            codeValue += \"]\";\r\n            added += \"=\";\r\n\r\n            for(let num of array){\r\n                array_sum += num; \r\n            }\r\n\r\n            const hashingMagic = array_sum; \r\n\r\n            const arrayIndex = hashingMagic %  arrayLength; \r\n            const compressing = String(hashingMagic) + \" modulo \" + String(arrayLength);\r\n            this.setState({hashingMagic, arrayIndex, hashedInto, codeValue, added, compressing});\r\n\r\n        } else {\r\n            this.setState({hashingMagic : \"\", arrayIndex : \"\"});\r\n        }\r\n    }\r\n    doNothing = () => {\r\n        return; \r\n    }\r\n\r\n    render () {\r\n        const divs = []\r\n        for(let i = 0; i<Number(this.state.arrayLength); i++){\r\n            divs.push(i)\r\n        }\r\n        console.log(divs)\r\n        console.log(divs.length);\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <br/>\r\n                    <span>Array Length  <input type=\"text\" onChange ={this.handleChange} name = \"arrayLength\" value = {this.state.arrayLength}/> </span>\r\n                    <span>Hash Code <input type=\"text\" onChange ={this.doNothing} name = \"hashingMagic\" value = {this.state.hashingMagic}/></span>\r\n                </div>\r\n\r\n                <div>\r\n                    <br/>\r\n                    <span>Key <input type=\"text\" onChange ={this.handleChange} name = \"arrayKey\" value = {this.state.arrayKey}/> </span>\r\n                    <span>Compressing <input type=\"text\" onChange ={this.doNothing} name = \"compressing\" value = {this.state.compressing}/></span>\r\n                </div>\r\n\r\n                <div>\r\n                    <br/>\r\n                    <span>Value <input type=\"text\" onChange ={this.handleChange} name = \"arrayValue\" value ={this.state.arrayValue}/> </span>\r\n                    <span>Array Index <input type=\"text\" onChange ={this.doNothing} name = \"arrayIndex\" value = {this.state.arrayIndex}/></span>\r\n                </div>\r\n                <br/>\r\n                <div className = \"bigBox\">\r\n                    {divs.map((d, id) => <div className = \"expandBox\" key ={d}>{d === Number(this.state.arrayIndex) ? this.state.arrayKey : d}</div>)}\r\n                    <br/>\r\n                </div>\r\n                <div className = \"bigBox\">\r\n                    {divs.map((d, id) => <div className = \"expandBox\" key ={d}>{d === Number(this.state.arrayIndex) ? this.state.arrayValue : \"\"}</div>)}\r\n                </div>\r\n\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default HashArray;","import React, { Component } from \"react\";\r\n\r\nclass CollisionHandle extends Component {\r\n  state = {\r\n    arrayLength: \"\",\r\n    arrayKey: \"\",\r\n    hashingMagic: \"\",\r\n    arrayIndex: \"\",\r\n    compressing: \"\",\r\n    arrayValue: \"\",\r\n    position: \"\",\r\n    index0: [],\r\n    index1: [],\r\n    index2: [],\r\n    index3: [],\r\n    index4: []\r\n  };\r\n\r\n  handleChange = event => {\r\n    if (event.target.name === \"arrayKey\") {\r\n      this.setState(\r\n        { [event.target.name]: event.target.value },\r\n        this.makeHash(event.target.value)\r\n      );\r\n    } else {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n  };\r\n\r\n  makeHash = key_in => {\r\n    // index = hash_function(key) % array.length;\r\n    // array[index] = Value;\r\n    const key = key_in;\r\n    const array = [];\r\n    let array_sum = 0;\r\n    const arrayLength = 5;\r\n    let hashedInto = \"[\";\r\n    let codeValue = \"[\";\r\n    let added = \"\";\r\n    let position = null;\r\n\r\n    if (key.length && arrayLength) {\r\n      for (let i = 0; i < key.length; i++) {\r\n        const char = key[i];\r\n        const charCode = char.charCodeAt(0);\r\n        array.push(charCode);\r\n        hashedInto += \"'\";\r\n        hashedInto += String(char);\r\n        hashedInto += \"'\";\r\n        codeValue += String(charCode);\r\n        added += String(charCode);\r\n        if (i < key.length - 1) {\r\n          codeValue += \",\";\r\n          hashedInto += \",\";\r\n          added += \"+\";\r\n        }\r\n      }\r\n      hashedInto += \"]\";\r\n      codeValue += \"]\";\r\n      added += \"=\";\r\n\r\n      for (let num of array) {\r\n        array_sum += num;\r\n      }\r\n\r\n      const hashingMagic = array_sum;\r\n\r\n      const arrayIndex = hashingMagic % arrayLength;\r\n      const compressing =\r\n        String(hashingMagic) + \" modulo \" + String(arrayLength);\r\n\r\n      /*Get a position based off index*/\r\n      switch (Number(arrayIndex)) {\r\n        case 0:\r\n          position = this.state.index0.length;\r\n          break;\r\n        case 1:\r\n          position = this.state.index1.length;\r\n          break;\r\n        case 2:\r\n          position = this.state.index2.length;\r\n          break;\r\n        case 3:\r\n          position = this.state.index3.length;\r\n          break;\r\n        case 4:\r\n          position = this.state.index4.length;\r\n          break;\r\n        default:\r\n          console.log(\r\n            \"This line is needed to get rid of warning but should never trigger\"\r\n          );\r\n      }\r\n\r\n      this.setState({\r\n        hashingMagic,\r\n        arrayIndex,\r\n        hashedInto,\r\n        codeValue,\r\n        added,\r\n        compressing,\r\n        position\r\n      });\r\n    } else {\r\n      this.setState({ hashingMagic: \"\", arrayIndex: \"\", position: \"\" });\r\n    }\r\n  };\r\n  doNothing = () => {\r\n    return;\r\n  };\r\n\r\n  addToIndexArray = () => {\r\n    const index = Number(this.state.arrayIndex);\r\n    const key = this.state.arrayKey.slice();\r\n    const index0 = this.state.index0.slice();\r\n    const index1 = this.state.index1.slice();\r\n    const index2 = this.state.index2.slice();\r\n    const index3 = this.state.index3.slice();\r\n    const index4 = this.state.index4.slice();\r\n    switch (index) {\r\n      case 0:\r\n        if (index0.includes(key) === false) {\r\n          index0.unshift(key);\r\n          this.setState({ index0, position: index0.length });\r\n        }\r\n        break;\r\n      case 1:\r\n        if (index1.includes(key) === false) {\r\n          index1.unshift(key);\r\n          this.setState({ index1, position: index1.length });\r\n        }\r\n        break;\r\n      case 2:\r\n        if (index2.includes(key) === false) {\r\n          index2.unshift(key);\r\n          this.setState({ index2, position: index2.length });\r\n        }\r\n        break;\r\n      case 3:\r\n        if (index3.includes(key) === false) {\r\n          index3.unshift(key);\r\n          this.setState({ index3, position: index3.length });\r\n        }\r\n        break;\r\n      case 4:\r\n        if (index4.includes(key) === false) {\r\n          index4.unshift(key);\r\n          this.setState({ index4, position: index4.length });\r\n        }\r\n        break;\r\n      default:\r\n        console.log(\r\n          \"This line is needed to get rid of warning but should never trigger\"\r\n        );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    /* Destruct arrays from state */\r\n    const { index0, index1, index2, index3, index4 } = this.state;\r\n    return (\r\n      <div>\r\n        <div>\r\n          <br />\r\n          <span>\r\n            Key{\" \"}\r\n            <input\r\n              type=\"text\"\r\n              onChange={this.handleChange}\r\n              name=\"arrayKey\"\r\n              value={this.state.arrayKey}\r\n            />{\" \"}\r\n          </span>\r\n          <span>\r\n            Array Index{\" \"}\r\n            <input\r\n              type=\"text\"\r\n              onChange={this.doNothing}\r\n              name=\"arrayIndex\"\r\n              value={this.state.arrayIndex}\r\n            />\r\n          </span>\r\n        </div>\r\n        <div>\r\n          <br />\r\n          <span>\r\n            Value{\" \"}\r\n            <input\r\n              type=\"text\"\r\n              onChange={this.handleChange}\r\n              name=\"arrayValue\"\r\n              value={this.state.arrayValue}\r\n            />{\" \"}\r\n          </span>\r\n          <span>\r\n            Position in Chain{\" \"}\r\n            <input\r\n              type=\"text\"\r\n              onChange={this.doNothing}\r\n              name=\"arrayIndex\"\r\n              value={this.state.position}\r\n            />\r\n          </span>\r\n        </div>\r\n        <button onClick={this.addToIndexArray}>Add Item</button>\r\n\r\n        <div className=\"bigBox\">\r\n          <div\r\n            className={\r\n              this.state.arrayIndex === 0 ? \"expandBox red\" : \"expandBox\"\r\n            }\r\n          >\r\n            0\r\n          </div>\r\n          <span>HEAD -></span>\r\n          {index0.map((index, id) => (\r\n            <span>{index} -></span>\r\n          ))}\r\n          <span>X</span>\r\n        </div>\r\n\r\n        <div className=\"bigBox\">\r\n          <div\r\n            className={\r\n              this.state.arrayIndex === 1 ? \"expandBox red\" : \"expandBox\"\r\n            }\r\n          >\r\n            1\r\n          </div>\r\n          <span>HEAD -></span>\r\n          {index1.map((index, id) => (\r\n            <span>{index} -></span>\r\n          ))}\r\n          <span>X</span>\r\n        </div>\r\n\r\n        <div className=\"bigBox\">\r\n          <div\r\n            className={\r\n              this.state.arrayIndex === 2 ? \"expandBox red\" : \"expandBox\"\r\n            }\r\n          >\r\n            2\r\n          </div>\r\n          <span>HEAD -></span>\r\n          {index2.map((index, id) => (\r\n            <span key={id}>{index} -></span>\r\n          ))}\r\n          <span>X</span>\r\n        </div>\r\n\r\n        <div className=\"bigBox\">\r\n          <div\r\n            className={\r\n              this.state.arrayIndex === 3 ? \"expandBox red\" : \"expandBox\"\r\n            }\r\n          >\r\n            3\r\n          </div>\r\n          <span>HEAD -></span>\r\n          {index3.map((index, id) => (\r\n            <span key={id}>{index} -></span>\r\n          ))}\r\n          <span>X</span>\r\n        </div>\r\n\r\n        <div className=\"bigBox\">\r\n          <div\r\n            className={\r\n              this.state.arrayIndex === 4 ? \"expandBox red\" : \"expandBox\"\r\n            }\r\n          >\r\n            4\r\n          </div>\r\n          <span>HEAD -></span>\r\n          {index4.map((index, id) => (\r\n            <span key={id}>{index} -></span>\r\n          ))}\r\n          <span>X</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CollisionHandle;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport HashFunction from './Components/HashFunction';\nimport HashArray from './Components/HashArray';\nimport CollisionHandle from './Components/CollisionHandle';\n\n\nclass App extends Component {\n  state = {\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Hash Function</h1>\n        <HashFunction />\n        <h1>Hash Table</h1>\n        <HashArray />\n        <br/>\n        <br/>\n        <br/>\n        <h1>Handle Collisions</h1>\n        <CollisionHandle />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}